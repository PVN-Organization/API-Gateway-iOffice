{
	"info": {
		"_postman_id": "vxp-gateway-complete-2025",
        "name": "VXP Gateway API - Production Ready",
        "description": "üöÄ VXP API Gateway - Production Ready\n\n‚ú® T√≠nh nƒÉng ch√≠nh:\n‚Ä¢ Auto wrap b·∫•t k·ª≥ file n√†o ‚Üí EDXML chu·∫©n QCVN_102_2016\n‚Ä¢ KH√îNG c·∫ßn fromCode/toCode - Gateway t·ª± derive t·ª´ meta JSON\n‚Ä¢ Aggregate mode: g·ªôp nhi·ªÅu file ‚Üí 1 EDXML (multiple attachments)\n‚Ä¢ Parse EDXML ‚Üí JSON c√≥ c·∫•u tr√∫c + decode file content\n‚Ä¢ Query parameters: limit, fromDate, toDate, status\n\nüìù Meta JSON (REQUIRED cho m·ªçi request):\n{\n  \"from\": {\"organId\": \"...\", \"organizationInCharge\": \"...\", \"organName\": \"...\"},\n  \"to\": [{\"organId\": \"...\", \"organizationInCharge\": \"...\", \"organName\": \"...\"}],\n  \"subject\": \"...\", \"content\": \"...\", \"codeNotation\": \"...\",\n  \"place\": \"...\", \"signerFullName\": \"...\"\n}\n\nüê≥ Docker:\ndocker run -d --name vxp-gateway -p 8080:8080 vxp-api-gateway:latest\n\nüß™ Quick Test:\n1. Send: POST /api/documents/send v·ªõi meta + file\n2. Aggregate: POST /api/documents/send/batch v·ªõi meta + aggregate=true + nhi·ªÅu files\n3. Receive: GET /api/documents/received\n4. Parse: GET /api/documents/{id}/parsed (tr·∫£ v·ªÅ decodedContent)\n\n‚ö†Ô∏è VXP test server kh√¥ng persist documents. Production server s·∫Ω l∆∞u v√† tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üè• Health & System",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "health"]
						}
					}
				},
				{
					"name": "Get All Agencies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/agencies",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "agencies"]
						},
						"description": "Get all agencies (111,000+ agencies from VXP)"
					}
				},
				{
					"name": "Get Agency by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/agencies?id=vxp.saas.03",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "agencies"],
							"query": [
								{
									"key": "id",
									"value": "vxp.saas.03"
								}
							]
						},
						"description": "Get specific agency by ID"
					}
				}
			]
		},
		{
			"name": "üì§ Send Documents",
			"item": [
				{
					"name": "1. Send File (Auto EDXML)",
					"event": [
						{
							"listen": "test",
							"script": {
                    "exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data) {",
									"    pm.collectionVariables.set('last_doc_id', response.data.docId);",
									"    console.log('‚úÖ Sent! DocId:', response.data.docId);",
                        "    console.log('üìÑ File:', response.data.fileName);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
                    "body": {
							"mode": "formdata",
							"formdata": [
                                {
                                    "key": "meta",
                                    "type": "text",
                                    "value": "{\n  \"from\": {\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organAdd\": \"S·ªë 1, H√† N·ªôi\",\n    \"email\": \"contact-vxp3@example.vn\",\n    \"telephone\": \"+84 24 1234 5678\",\n    \"fax\": \"+84 24 8765 4321\",\n    \"website\": \"https://vxp3.example.vn\"\n  },\n  \"to\": [{\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  }],\n  \"subject\": \"Ti√™u ƒë·ªÅ th·ª≠\",\n  \"content\": \"N·ªôi dung m√¥ t·∫£\",\n  \"codeNotation\": \"GW-AUTO\",\n  \"place\": \"H√† N·ªôi\",\n  \"signerFullName\": \"Nguy·ªÖn VƒÉn A\"\n}",
                                    "description": "Meta JSON (REQUIRED): from/to with organId, organizationInCharge, organName, v√† c√°c field kh√°c"
                                },
								{
									"key": "file",
									"type": "file",
									"src": "/Users/duyphuongpham/Downloads/20220209_java_SDKVXP_Example/test_document.txt",
									"description": "Any file - Gateway t·ª± ƒë·ªông wrap th√†nh EDXML v√† √°p d·ª•ng meta"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8080/api/documents/send",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "documents", "send"]
						},
                        "description": "Send file - Gateway t·ª± ƒë·ªông wrap to EDXML\n\nü§ñ Gateway t·ª± ƒë·ªông:\n‚úÖ Validate file\n‚úÖ Wrap th√†nh EDXML (k·ªÉ c·∫£ file ƒë√£ l√† EDXML)\n‚úÖ √Åp d·ª•ng meta v√†o EDXML header\n‚úÖ Send to VXP Server\n\nüìù 'meta' (JSON) - REQUIRED:\n{\n  \"from\": {\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organAdd\": \"S·ªë 1, H√† N·ªôi\",\n    \"email\": \"contact@example.vn\",\n    \"telephone\": \"+84...\",\n    \"fax\": \"+84...\",\n    \"website\": \"https://...\"\n  },\n  \"to\": [{\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  }],\n  \"subject\": \"Ti√™u ƒë·ªÅ\",\n  \"content\": \"M√¥ t·∫£\",\n  \"codeNotation\": \"GW-AUTO\",\n  \"place\": \"H√† N·ªôi\",\n  \"signerFullName\": \"Nguy·ªÖn VƒÉn A\"\n}\n\n‚ö†Ô∏è Ch·ªâ c·∫ßn meta + file. Gateway t·ª± ƒë·ªông x·ª≠ l√Ω t·∫•t c·∫£!\n\nüì¶ Batch aggregate: /api/documents/send/batch v·ªõi aggregate=true"
					}
				},
				{
					"name": "2. Send Multiple Files (Aggregate)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "meta",
									"type": "text",
									"value": "{\n  \"from\": {\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  },\n  \"to\": [{\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  }],\n  \"subject\": \"T√†i li·ªáu g·ªôp\",\n  \"content\": \"G·ª≠i nhi·ªÅu file trong 1 EDXML\"\n}",
									"description": "Meta for EDXML header"
								},
								{
									"key": "aggregate",
									"value": "true",
									"type": "text",
									"description": "true = g·ªôp nhi·ªÅu file v√†o 1 EDXML (multiple attachments)"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/duyphuongpham/Downloads/20220209_java_SDKVXP_Example/test_document.txt",
									"description": "File 1"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/duyphuongpham/Downloads/20220209_java_SDKVXP_Example/test_document.txt",
									"description": "File 2 (duplicate for testing)"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/Users/duyphuongpham/Downloads/20220209_java_SDKVXP_Example/test_document.txt",
									"description": "File 3 (duplicate for testing)"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8080/api/documents/send/batch",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "documents", "send", "batch"]
						},
						"description": "Aggregate: nhi·ªÅu files ‚Üí 1 EDXML\n\nü§ñ Gateway t·ª± ƒë·ªông:\n‚úÖ G·ªôp nhi·ªÅu file v√†o 1 EDXML\n‚úÖ 1 docId duy nh·∫•t\n‚úÖ T·∫•t c·∫£ files th√†nh attachments\n‚úÖ √Åp d·ª•ng meta v√†o header\n\nRequired:\n- meta (JSON): from/to info\n- aggregate=true\n- Nhi·ªÅu 'file' fields\n\n‚ö†Ô∏è Ch·ªâ c·∫ßn meta + aggregate + files. Gateway t·ª± ƒë·ªông x·ª≠ l√Ω!"
					}
				},
				{
					"name": "3. Get All Agencies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/agencies",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "agencies"]
						}
					}
				}
			],
			"description": "üì§ Send Documents\n\n‚ú® Features:\n‚Ä¢ Auto EDXML wrap cho m·ªçi file type\n‚Ä¢ Aggregate nhi·ªÅu files ‚Üí 1 EDXML\n‚Ä¢ Ch·ªâ c·∫ßn meta JSON - kh√¥ng c·∫ßn fromCode/toCode\n\nPort: 8080"
		},
		{
			"name": "üì• Receive Documents",
			"item": [
				{
					"name": "1. Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/health",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "health"]
						}
					}
				},
                {
                    "name": "2. Get Received Documents",
					"request": {
						"method": "GET",
						"header": [],
                        "url": {
                            "raw": "http://localhost:8080/api/documents/received",
                            "protocol": "http",
                            "host": ["localhost"],
                            "port": "8080",
                            "path": ["api", "documents", "received"]
                        },
                        "description": "Get received documents t·ª´ VXP server (ph·ª• thu·ªôc d·ªØ li·ªáu l∆∞u tr·ªØ ph√≠a VXP)"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Auto save first document ID for next request",
									"const response = pm.response.json();",
									"if (response.success && response.data.documents && response.data.documents.length > 0) {",
									"    const docId = response.data.documents[0].id;",
									"    pm.collectionVariables.set('received_doc_id', docId);",
									"    console.log('üìÑ Saved doc ID:', docId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
                    "name": "3. Get Document Detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/documents/{{received_doc_id}}",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "documents", "{{received_doc_id}}"]
						},
						"description": "Get detail of received document\n\nUse {{received_doc_id}} from previous request"
					}
				},
                {
                    "name": "3b. Get Document Detail (Parsed + Decoded Content)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "http://localhost:8080/api/documents/{{received_doc_id}}/parsed",
                            "protocol": "http",
                            "host": ["localhost"],
                            "port": "8080",
                            "path": ["api", "documents", "{{received_doc_id}}", "parsed"]
                        },
                        "description": "‚ú® Parse EDXML + Decode file content\n\nüì¶ Response Structure:\n{\n  \"success\": true,\n  \"data\": {\n    \"docId\": \"...\",\n    \"parsed\": {\n      \"from\": {\"organId\": \"...\", \"organName\": \"...\"},\n      \"to\": [{\"organId\": \"...\", \"organName\": \"...\"}],\n      \"documentId\": \"...\",\n      \"subject\": \"...\",\n      \"codeNumber\": \"...\",\n      \"attachments\": [\n        {\n          \"attachmentName\": \"file.txt\",\n          \"contentType\": \"text/plain\",\n          \"contentId\": \"cid:...\",\n          \"decodedContent\": \"‚ú® N·ªôi dung ƒë√£ gi·∫£i m√£ t·ª´ base64 + unzip\"\n        }\n      ]\n    },\n    \"raw\": \"<?xml...>\" // EDXML raw\n  }\n}\n\nüîß Gateway t·ª± ƒë·ªông:\n‚Ä¢ Decode base64 t·ª´ ContentTransferEncoded\n‚Ä¢ Unzip content (v√¨ VXP d√πng ZIP compression)\n‚Ä¢ Tr·∫£ v·ªÅ plain text trong decodedContent\n\n‚ö†Ô∏è VXP test server kh√¥ng persist documents. Ch·ªâ ho·∫°t ƒë·ªông v·ªõi production server."
                    }
                },
				{
					"name": "4. Update Status to 'done'",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"docId\": \"{{received_doc_id}}\",\n  \"status\": \"done\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/documents/status",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "documents", "status"]
						},
						"description": "Mark document as processed (done)"
					}
				},
				{
					"name": "5. Get All Agencies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/agencies",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "agencies"]
						}
					}
				}
			],
            "description": "üì• Receive Documents\n\n‚ú® Features:\n‚Ä¢ Get received documents v·ªõi query params\n‚Ä¢ Get detail (raw EDXML)\n‚Ä¢ Get parsed + decoded content (‚ú® NEW!)\n‚Ä¢ Update document status\n\n‚ö†Ô∏è VXP test server kh√¥ng persist. Production server s·∫Ω l∆∞u ƒë·∫ßy ƒë·ªß."
		},
		{
			"name": "üîÑ COMPLETE FLOW (Test Send ‚Üí Receive)",
			"item": [
				{
					"name": "Step 0: Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "health"]
						},
						"description": "Check gateway is running (Docker or Local)"
					}
				},
				{
					"name": "Step 1: Send Document (Self-send for testing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data) {",
									"    pm.collectionVariables.set('sent_doc_id', response.data.docId);",
									"    console.log('‚úÖ Document sent! ID:', response.data.docId);",
									"    console.log('‚è≥ Wait a few seconds, then run Step 2');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
                                {
                                    "key": "meta",
                                    "type": "text",
                                    "value": "{\n  \"from\": {\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  },\n  \"to\": [{\n    \"organId\": \"vxp.saas.03\",\n    \"organizationInCharge\": \"ƒê∆°n v·ªã test vxp 3\",\n    \"organName\": \"ƒê∆°n v·ªã test vxp 3\"\n  }]\n}",
                                    "description": "Meta JSON (REQUIRED): from/to info"
                                },
                                {
									"key": "file",
									"type": "file",
									"src": "/Users/duyphuongpham/Downloads/20220209_java_SDKVXP_Example/test_document.txt",
									"description": "Test file - Gateway t·ª± ƒë·ªông wrap v√† √°p d·ª•ng meta"
                                }
							]
						},
						"url": {
							"raw": "http://localhost:8080/api/documents/send",
							"protocol": "http",
							"host": ["localhost"],
							"port": "8080",
							"path": ["api", "documents", "send"]
						}
					}
				},
				{
					"name": "Step 2: Get Received Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"if (response.success && response.data.documents && response.data.documents.length > 0) {",
									"    const doc = response.data.documents[0];",
									"    pm.collectionVariables.set('received_doc_id', doc.id);",
									"    console.log('üì® Received document ID:', doc.id);",
									"    console.log('From:', doc.fromCode);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/documents/received",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "documents", "received"]
						}
					}
				},
				{
					"name": "Step 3: Get Document Detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/documents/{{received_doc_id}}",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "documents", "{{received_doc_id}}"]
						}
					}
				},
				{
					"name": "Step 4: Update Document Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"docId\": \"{{received_doc_id}}\",\n  \"status\": \"done\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/documents/status",
							"protocol": "http",
							"host": ["localhost"],
                            "port": "8080",
							"path": ["api", "documents", "status"]
						}
					}
				}
			],
			"description": "üîÑ Complete Flow: Send ‚Üí Receive\n\nüìã Test Steps (ch·∫°y theo th·ª© t·ª±):\n\n0Ô∏è‚É£ Health Check\n1Ô∏è‚É£ Send Document\n   ‚Ä¢ Ch·ªâ c·∫ßn: meta JSON + file\n   ‚Ä¢ Gateway auto wrap ‚Üí EDXML\n   ‚Ä¢ Tr·∫£ v·ªÅ docId\n\n2Ô∏è‚É£ Get Received Documents\n   ‚Ä¢ Query v·ªõi limit, fromDate, toDate\n   ‚Ä¢ Auto save first docId to {{received_doc_id}}\n\n3Ô∏è‚É£ Get Document Detail\n   ‚Ä¢ Raw EDXML\n   ‚Ä¢ ho·∫∑c /parsed ƒë·ªÉ decode content\n\n4Ô∏è‚É£ Update Status\n   ‚Ä¢ Mark as 'done'\n\n‚ö†Ô∏è VXP test server kh√¥ng persist ‚Üí Steps 2-4 c√≥ th·ªÉ tr·∫£ r·ªóng.\n‚úÖ Production server: t·∫•t c·∫£ ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß."
		}
	],
	"variable": [
		{
			"key": "sent_doc_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "received_doc_id",
			"value": "",
			"type": "string"
		}
	]
}
